{"version":3,"sources":["components/Icon.js","App.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","every","value","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAceA,EAXF,SAAC,GACN,OADiB,EAAVC,MAEH,IAAK,SACD,OAAO,kBAAC,IAAD,CAAaC,UAAU,SAClC,IAAK,QACD,OAAO,kBAAC,IAAD,CAASA,UAAU,SAC9B,QACI,OAAO,kBAAC,IAAD,CAAOA,UAAU,W,qECAlCC,G,MAAY,IAAIC,MAAM,GAAGC,KAAK,UA0HrBC,EAxHH,WAAO,IAAD,EACaC,oBAAS,GADtB,mBACVC,EADU,KACDC,EADC,OAEmBF,mBAAS,IAF5B,mBAEVG,EAFU,KAEEC,EAFF,KAuEXC,EAAa,SAACC,GACnB,OAAIH,EACII,YAAMJ,EAAY,CAAEK,KAAM,YAEJ,UAA1BZ,EAAUU,GAINC,YAAM,sBAAuB,CAAEC,KAAM,WAH5CZ,EAAUU,GAAcL,EAAU,QAAU,SAC5CC,GAAYD,GAjEZL,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,IAIVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAJVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAQbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,IAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,cAMbA,EAAUa,OAAM,SAACC,GAChB,MAAiB,UAAVA,MAGRN,EAAc,gBAiBhB,OACC,kBAACO,EAAA,EAAD,CAAWhB,UAAU,OACpB,wBAAIA,UAAU,eAAd,eACA,kBAAC,IAAD,CAAgBiB,SAAS,kBACzB,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGpB,UAAU,eACpBQ,EACA,yBAAKR,UAAU,aACd,wBAAIA,UAAU,2CACZQ,GAEF,kBAACa,EAAA,EAAD,CAAQC,MAAM,UAAUC,OAAK,EAACC,QA5FjB,WAClBjB,GAAW,GACXE,EAAc,IACdR,EAAUE,KAAK,QAAS,EAAG,KAyFtB,WAKD,wBAAIH,UAAU,2CACZM,EAAU,QAAU,SADtB,YAID,yBAAKN,UAAU,QACbC,EAAUwB,KAAI,SAACC,EAAMC,GAAP,OACd,kBAACC,EAAA,EAAD,CAAM5B,UAAU,OAAOwB,QAAS,kBAAMd,EAAWiB,KAChD,kBAACE,EAAA,EAAD,CAAU7B,UAAU,OACnB,kBAAC,EAAD,CAAMD,KAAM2B,cCpHrBI,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,W","file":"static/js/main.0f1bc611.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FaRegCircle, FaPen, FaTimes} from 'react-icons/fa';\r\n\r\nconst Icon = ({name}) => {\r\n        switch (name) {\r\n            case \"circle\":\r\n                return <FaRegCircle className=\"icon\" />\r\n            case \"cross\":\r\n                return <FaTimes className=\"icon\"/>\r\n            default:\r\n                return <FaPen className=\"icon\"/>\r\n        }\r\n}\r\n\r\nexport default Icon;","import React, { useState } from \"react\";\nimport Icon from \"./components/Icon\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Card, CardBody, Button, Col, Row, Container } from \"reactstrap\";\nimport \"./App.css\";\n\nconst itemArray = new Array(9).fill(\"empty\");\n\nconst App = () => {\n\tconst [isCross, setIsCross] = useState(false);\n\tconst [winMessage, setWinMessage] = useState(\"\");\n\n\tconst reloadGame = () => {\n\t\tsetIsCross(false);\n\t\tsetWinMessage(\"\");\n\t\titemArray.fill(\"empty\", 0, 9);\n\t};\n\n\tconst checkIsWinner = () => {\n\t\tif (\n\t\t\titemArray[0] === itemArray[1] &&\n\t\t\titemArray[1] === itemArray[2] &&\n\t\t\titemArray[0] !== \"empty\"\n\t\t) {\n\t\t\tsetWinMessage(`${itemArray[0]} won`);\n\t\t} else if (\n\t\t\titemArray[3] === itemArray[4] &&\n\t\t\titemArray[4] === itemArray[5] &&\n\t\t\titemArray[3] !== \"empty\"\n\t\t) {\n\t\t\tsetWinMessage(`${itemArray[3]} won`);\n\t\t} else if (\n\t\t\titemArray[6] === itemArray[7] &&\n\t\t\titemArray[7] === itemArray[8] &&\n\t\t\titemArray[6] !== \"empty\"\n\t\t) {\n\t\t\tsetWinMessage(`${itemArray[6]} won`);\n\t\t} else if (\n\t\t\titemArray[0] === itemArray[3] &&\n\t\t\titemArray[3] === itemArray[6] &&\n\t\t\titemArray[0] !== \"empty\"\n\t\t) {\n\t\t\tsetWinMessage(`${itemArray[0]} won`);\n\t\t} else if (\n\t\t\titemArray[1] === itemArray[4] &&\n\t\t\titemArray[4] === itemArray[7] &&\n\t\t\titemArray[1] !== \"empty\"\n\t\t) {\n\t\t\tsetWinMessage(`${itemArray[0]} won`);\n\t\t} else if (\n\t\t\titemArray[2] === itemArray[5] &&\n\t\t\titemArray[5] === itemArray[8] &&\n\t\t\titemArray[2] !== \"empty\"\n\t\t) {\n\t\t\tsetWinMessage(`${itemArray[2]} won`);\n\t\t} else if (\n\t\t\titemArray[0] === itemArray[4] &&\n\t\t\titemArray[4] === itemArray[8] &&\n\t\t\titemArray[0] !== \"empty\"\n\t\t) {\n\t\t\tsetWinMessage(`${itemArray[0]} won`);\n\t\t} else if (\n\t\t\titemArray[2] === itemArray[4] &&\n\t\t\titemArray[4] === itemArray[6] &&\n\t\t\titemArray[2] !== \"empty\"\n\t\t) {\n\t\t\tsetWinMessage(`${itemArray[2]} won`);\n\t\t}\n\t};\n\n\tconst checkTie = () => {\n\t\tif (\n\t\t\titemArray.every((value) => {\n\t\t\t\treturn value !== \"empty\";\n\t\t\t})\n\t\t) {\n\t\t\tsetWinMessage(\"Its a tie\");\n\t\t}\n\t};\n\tconst changeItem = (itemNumber) => {\n\t\tif (winMessage) {\n\t\t\treturn toast(winMessage, { type: \"success\" });\n\t\t}\n\t\tif (itemArray[itemNumber] === \"empty\") {\n\t\t\titemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\n\t\t\tsetIsCross(!isCross);\n\t\t} else {\n\t\t\treturn toast(\"it is alredy filled\", { type: \"error\" });\n\t\t}\n\t\tcheckIsWinner();\n\t\tcheckTie();\n\t};\n\n\treturn (\n\t\t<Container className='p-5'>\n\t\t\t<h1 className='text-center'>Tic Tac Toe</h1>\n\t\t\t<ToastContainer position='bottom-center' />\n\t\t\t<Row>\n\t\t\t\t<Col md={6} className='offset-md-3'>\n\t\t\t\t\t{winMessage ? (\n\t\t\t\t\t\t<div className='mt-2 mb-2'>\n\t\t\t\t\t\t\t<h1 className='text-center text-uppercase text-success'>\n\t\t\t\t\t\t\t\t{winMessage}\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t<Button color='success' block onClick={reloadGame}>\n\t\t\t\t\t\t\t\tReload\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<h1 className='text-center text-warning text-uppercase'>\n\t\t\t\t\t\t\t{isCross ? \"cross\" : \"circle\"} 's turn\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t)}\n\t\t\t\t\t<div className='grid'>\n\t\t\t\t\t\t{itemArray.map((item, index) => (\n\t\t\t\t\t\t\t<Card className='card' onClick={() => changeItem(index)}>\n\t\t\t\t\t\t\t\t<CardBody className='box'>\n\t\t\t\t\t\t\t\t\t<Icon name={item} />\n\t\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t);\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}